// @strict-types

#Область ПрограммныйИнтерфейс

// Сервер доступен.
// 
// Возвращаемое значение:
//  Булево - Сервер доступен
Функция СерверДоступен() Экспорт
	
	СерверДоступен = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ДополнительныеПараметры = Новый Структура("Заголовки", Заголовки);
	
	Попытка
		КоннекторHTTP.Get(URlДляПроверкиДоступностиСервера(), Неопределено, ДополнительныеПараметры);
	Исключение
		СерверДоступен = Ложь;
	КонецПопытки;
	
	Возврат СерверДоступен;
	
КонецФункции

// Получить заголовки всех отчетов об ошибках по параметрам.
// 
// Возвращаемое значение:
//  Соответствие, Структура - Получить заголовки всех отчетов об ошибках по параметрам
Функция ПолучитьЗаголовкиВсехОтчетовОбОшибкахПоПараметрам(Знач Параметры = Неопределено) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыЗапроса = Новый Структура("from, to", ТекущаяДатаСеанса()- 3600*24000, ТекущаяДатаСеанса());
	ДополнительныеПараметры = Новый Структура("Заголовки", Заголовки);
	
	Возврат КоннекторHTTP.PostJson(URlДляПолученияСпискаОшибок(), ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецФункции

// Получить маппинг полей
// 
// Возвращаемое значение:
//  Соответствие, Структура - Получить заголовки всех отчетов об ошибках по параметрам
Функция ПолучитьМаппингПолейЗапросаПолученияСпискаОшибок() Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ДополнительныеПараметры = Новый Структура("Заголовки", Заголовки);
	
	Возврат КоннекторHTTP.PostJson(URlДляПолученияМаппингаПолейЗапросаПолученияСпискаОшибок(), 
	                               Новый Структура, 
	                               ДополнительныеПараметры);
	
КонецФункции


// Получить детали отчета об ошибке по ИД.
// 
// Параметры:
//  ИД - Строка - 
// 
// Возвращаемое значение:
//  Соответствие, Структура - 
Функция ПолучитьДеталиОтчетаОбОшибкеПоИД(ИД) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат КоннекторHTTP.PostJson(URLДляПолученияДеталейОтчетаОбОшибках(ИД), Новый Структура);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗапросник() Экспорт
	Возврат Обработки.ЗапросникYellowCollector.Создать();
КонецФункции

#Область ФормированиеURL

// Url для получения списка ошибок.
// 
// Возвращаемое значение:
//  Строка - 
Функция URlДляПолученияМаппингаПолейЗапросаПолученияСпискаОшибок()
	
	Возврат ПолучитьЗапросник()
	        .УстановитьМаршрут(Справочники.МаршрутыYellowCollector.V1_ErrorListMapping)
	        .Иницизировать()
	        .СформироватьURL();
	
КонецФункции

// Url для получения списка ошибок.
// 
// Возвращаемое значение:
//  Строка - 
Функция URlДляПолученияСпискаОшибок()
	
	Возврат ПолучитьЗапросник()
	        .УстановитьМаршрут(Справочники.МаршрутыYellowCollector.V1_ErrorList)
	        .Иницизировать()
	        .СформироватьURL();
	
КонецФункции

// Url для проверки доступности сервера.
// 
// Возвращаемое значение:
//  Строка -
Функция URlДляПроверкиДоступностиСервера()
	
	Возврат ПолучитьЗапросник()
	        .УстановитьМаршрут(Справочники.МаршрутыYellowCollector.Ping)
	        .Иницизировать()
	        .СформироватьURL();
	
КонецФункции

// Url для детальной информации отчета об ошибках
// 
// Возвращаемое значение:
//  Строка -
Функция URLДляПолученияДеталейОтчетаОбОшибках(ИД)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИД", ИД);
	
	Возврат ПолучитьЗапросник()
	        .УстановитьМаршрут(Справочники.МаршрутыYellowCollector.V1_ErrorDetails)
	        .Иницизировать(Параметры)
	        .СформироватьURL();
	        
КонецФункции

#КонецОбласти

#КонецОбласти

