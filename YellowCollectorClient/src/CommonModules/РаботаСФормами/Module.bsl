// @strict-types

#Область ПрограммныйИнтерфейс

// Создать таблицу по описанию
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  ОписаниеТаблицы - Структура - состоит из:
//  *Имя - Строка - 
//  *ОписаниеКолонок - Массив из Структура:
//  	** ИмяКолонки - Строка - 
//  	** ТипСтрокой - Строка -
//  	** Заголовок - Строка -
//  УдалятьТаблицуПередДобавлением - Булево - 
//
Процедура СоздатьТаблицуНаФормеПоОписанию(Форма, ОписаниеТаблицы, УдалятьТаблицуПередДобавлением = Ложь) Экспорт
	
	МассивДобавляемыхРеквизитов = Новый Массив;
    МассивДобавляемыхРеквизитов.Добавить(РеквизитФормыТаблицаЗначений(ОписаниеТаблицы.Имя)); 
    
	Для Каждого ОписаниеКолонки Из ОписаниеТаблицы.ОписаниеКолонок Цикл
		
		ТипКолонки = Новый ОписаниеТипов(ОписаниеКолонки.ТипСтрокой);
		МассивДобавляемыхРеквизитов
		     .Добавить(РеквизитФормы(ОписаниеКолонки.ИмяКолонки, 
		     						 ТипКолонки,
		                             ОписаниеТаблицы.Имя,
		                             ОписаниеКолонки.Заголовок));
	
	КонецЦикла;
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	Если УдалятьТаблицуПередДобавлением Тогда 	
		МассивУдаляемыхРеквизитов.Добавить(ОписаниеТаблицы.Имя);    
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов); 
	
КонецПроцедуры

// Общая таблица ошибок уже создана.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  ИмяРеквизита - Строка - 
// 
// Возвращаемое значение:
//  Булево - 
Функция РеквизитФормыСуществует(Форма, ИмяРеквизита) Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита);	
КонецФункции

// Вывести таблицу на форму.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  ИмяТаблицы - Строка - 
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - 
//  ЗаголовокТаблицы - Строка - 
//  ОписанияКолонок - Массив из Структура - состоит из:
//  	* ИмяКолонки - Строка -
//  	* Заголовок - Строка -  
//
Процедура ВывестиТаблицуНаФорму(Форма, ИмяТаблицы, Родитель, ЗаголовокТаблицы, ОписанияКолонок) Экспорт
    
    ТаблицаФормы = Форма.Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), Родитель);
    ТаблицаФормы.ПутьКДанным = ИмяТаблицы;
    ТаблицаФормы.Заголовок = ЗаголовокТаблицы;
    ТаблицаФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    ТаблицаФормы.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;
    ТаблицаФормы.РастягиватьПоГоризонтали = Истина;
    ТаблицаФормы.ИзменятьПорядокСтрок = Ложь;
    ТаблицаФормы.ИзменятьСоставСтрок = Ложь;
    ТаблицаФормы.РазрешитьНачалоПеретаскивания = Ложь;
	
	ДобавленнаяКолонка = Неопределено;
	Для Каждого ОписаниеКолонки Из ОписанияКолонок Цикл
		ДобавленнаяКолонка = ДобавитьНовуюКолонку(Форма, 
		                                          ТаблицаФормы, 
		                                          ИмяТаблицы, 
		                                          ОписаниеКолонки.ИмяКолонки, 
		                                          ОписаниеКолонки.Заголовок,
		                                          ДобавленнаяКолонка);	
	КонецЦикла;
            
КонецПроцедуры  

// Добавить новую колонку.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ТаблицаФормы - РасширениеТаблицыФормыДляДинамическогоСписка, ТаблицаФормы - Таблица формы
//  ИмяТаблицы - Строка - Имя таблицы
//  ИмяКолонки - Строка - Имя колонки
//  Заголовок Заголовок
//  ПредыдущаяКолонка - Неопределено, ГруппаФормы -
//  СтруктураСвойств - Неопределено - Структура свойств
// 
// Возвращаемое значение:
//  ГруппаФормы --
Функция ДобавитьНовуюКолонку(Форма, 
                             ТаблицаФормы, 
                             ИмяТаблицы, 
                             ИмяКолонки, 
                             Заголовок,
                             ПредыдущаяКолонка, 
                             СтруктураСвойств = Неопределено)
    
    НоваяКолонка = Форма.Элементы.Вставить(ИмяТаблицы+ИмяКолонки, Тип("ПолеФормы"), ТаблицаФормы, ПредыдущаяКолонка);
    НоваяКолонка.Заголовок = Заголовок;
    НоваяКолонка.ПутьКДанным = ИмяТаблицы + "." + ИмяКолонки;
    НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;  
    НоваяКолонка.РастягиватьПоГоризонтали = Истина;  
    Если НЕ СтруктураСвойств = Неопределено Тогда
        Для Каждого КлючЗначение Из СтруктураСвойств Цикл
            Попытка
                НоваяКолонка[КлючЗначение.Ключ] = СтруктураСвойств[КлючЗначение.Ключ];
            Исключение
            КонецПопытки;
        КонецЦикла;    
    КонецЕсли;
    
    Возврат НоваяКолонка;
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Реквизит формы таблица.
// 
// Параметры:
//  ИмяТаблицы - Строка - 
// 
// Возвращаемое значение:
//  РеквизитФормы - Реквизит формы таблица
Функция РеквизитФормыТаблицаЗначений(ИмяТаблицы)
	Возврат Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"));
КонецФункции

// Реквизит формы строка.
// 
// Параметры:
//  ИмяРеквизита - Строка -
//  Тип - ОписаниеТипов  - 
//  Путь - Строка -
//  Заголовок - Строка -
// 
// Возвращаемое значение:
//  РеквизитФормы -- Реквизит формы таблица
Функция РеквизитФормы(ИмяРеквизита, Тип, Путь, Заголовок)
	Возврат Новый РеквизитФормы(ИмяРеквизита, Тип, Путь, Заголовок);
КонецФункции

#КонецОбласти
