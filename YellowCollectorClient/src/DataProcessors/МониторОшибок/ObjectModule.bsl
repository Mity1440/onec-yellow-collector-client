#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных 

Перем МенеджерМонитора;

#КонецОбласти		

#Область ПрограммныйИнтерфейс  

Функция ПолучитьДанныеМонитораИзКоллектора(Знач ПараметрыМонитора = Неопределено) Экспорт
	
	ПараметрыМонитораИзменяемые = ИзменяемыеПараметрыМонитораИзФиксированных(ПараметрыМонитора);
	
	ДанныеМонитора = ДанныеМонитораИзКоллектораШаблон();
	 
	ПодготовитьМониторКРаботеПриНеобходимости(ПараметрыМонитораИзменяемые);
	ЗаголовкиВсехОтчетов = ПолучитьЗаголовкиВсехОтчетовОбОшибках();
	
	ДанныеМонитора["ДокументПоВсемОшибкам"] = СформироватьДокументПоВсемОшибкам(ЗаголовкиВсехОтчетов, ПараметрыМонитораИзменяемые);
	
	Возврат ДанныеМонитора;
	
КонецФункции

Процедура ПодготовитьМониторКРаботеПриНеобходимости(ПараметрыМонитора) Экспорт
	
	Если МониторГотовКРаботе() Тогда
		Возврат;
	КонецЕсли;
	
	
	ПараметрыМонитораИзменяемые = ИзменяемыеПараметрыМонитораИзФиксированных(ПараметрыМонитора);
	
	ДополнитьПараметрыМонитораИформациейИзЗаголовков(ПараметрыМонитораИзменяемые, ПолучитьМаппингПолейЗапросаПолученияСпискаОшибок());
	ПодготовитьМониторКРаботе(ПараметрыМонитораИзменяемые);	
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаМонитораКРаботе

Функция ИзменяемыеПараметрыМонитораИзФиксированных(ПараметрыМонитора) 
	
	Если Тип("ФиксированнаяСтруктура") = ТипЗнч(ПараметрыМонитора) Тогда
		Возврат ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыМонитора, Ложь);
	КонецЕсли;
	
	Возврат ПараметрыМонитора;
	
КонецФункции

Функция МониторГотовКРаботе()
	
	Возврат НЕ ПолучитьОсновнуюСхемуКомпоновки() = Неопределено
	        И НЕ СтруктураКолонок = Неопределено;

КонецФункции

Процедура ДополнитьПараметрыМонитораИформациейИзЗаголовков(ПараметрыМонитора, МаппингПолей)
	ПараметрыМонитора.Вставить("МаппингПолей", МаппингПолей);
КонецПроцедуры

Функция ПолучитьОсновнуюСхемуКомпоновки()
	
	Если ЗначениеЗаполнено(АдресСхемы) И ЭтоАдресВременногоХранилища(АдресСхемы) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресСхемы);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПодготовитьМониторКРаботе(Знач Параметры = Неопределено)

	СтруктураКолонок = СтруктураКолонокТаблицыИзЗаголовкаОшибки(Параметры["МаппингПолей"]);
	ПолучитьСхемуКомпоновкиДанныхИПоместитьВоВременноеХранилище(Параметры);
		
КонецПроцедуры

#КонецОбласти

#Область ФормированиеОтчетаОбОшибках

// Данные монитора из коллектора шаблон.
// 
// Возвращаемое значение:
//  Структура - Данные монитора из коллектора шаблон:
// * ДокументПоВсемОшибкам - Неопределено - 
// 
Функция ДанныеМонитораИзКоллектораШаблон()
	
	Результат = Новый Структура;
	Результат.Вставить("ДокументПоВсемОшибкам", Неопределено);	
	
	Возврат Результат;

КонецФункции

Функция СформироватьДокументПоВсемОшибкам(ЗаголовкиВсехОтчетов, ПараметрыМонитора)
	
	ОбщийДокументПоВсемОшибкам = Новый ТабличныйДокумент;
	
	ДанныеРасшифроки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
	
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);   
	НастройкиКомпоновки = ПолучитьИзВременногоХранилища(ПараметрыМонитора["НастройкиСКДДляДокументаПоВсемОшибкамСтрока"]);  
	
	ИзменитьСхемуВЗависимостиОтНастроекКомпоновки(Схема, НастройкиКомпоновки);
	
	МакетКомпоновки = КомпоновщикМакета
							.Выполнить(Схема, 
	                                   НастройкиКомпоновки, 
									   ДанныеРасшифроки);
	
	ВнешниеНаборы = Новый Структура("ОбщаяТаблицаОшибок", ЗаголовкиВсехОтчетовОбОшибкахВТаблице(ЗаголовкиВсехОтчетов));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы, ДанныеРасшифроки);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ОбщийДокументПоВсемОшибкам);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки); 

	ПоместитьВоВременноеХранилище(ДанныеРасшифроки, АдресДанныхРасшифровки);	
	
	Возврат ОбщийДокументПоВсемОшибкам;
	
КонецФункции 

// Изменить схему взависимости от настроек компоновки.
// 
// Параметры:
//  Схема - СхемаКомпоновкиДанных - 
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных - 
Процедура ИзменитьСхемуВЗависимостиОтНастроекКомпоновки(Схема, НастройкиКомпоновки)

	ОписаниеИсключаемыхПолей = Новый Массив;
	НайтиВсеПоляГруппировкиВСтруктуре(НастройкиКомпоновки.Структура, ОписаниеИсключаемыхПолей);
	ИсключитьПоляИзМакетовПолейСхемы(ОписаниеИсключаемыхПолей, Схема);
	
КонецПроцедуры

Процедура НайтиВсеПоляГруппировкиВСтруктуре(Структура, ПоляГруппировки)
	
	Для Каждого ЭлементСтруктуры Из Структура Цикл     
		МассивПолейУровня = Новый Массив;
		Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() > 0 Тогда
			Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				МассивПолейУровня.Добавить(ПолеГруппировки.Поле);	
			КонецЦикла;
		КонецЕсли;
		ПоляГруппировки.Добавить(МассивПолейУровня);
		НайтиВсеПоляГруппировкиВСтруктуре(ЭлементСтруктуры.Структура, ПоляГруппировки)
	КонецЦикла;
	
КонецПроцедуры 

Процедура ИсключитьПоляИзМакетовПолейСхемы(ОписаниеИсключаемыхПолей, Схема)
	
	ИсключаемыеПоля = Новый Массив;
	Для Каждого ОписаниеПолей Из ОписаниеИсключаемыхПолей Цикл 
		Если ОписаниеПолей.Найти(Новый ПолеКомпоновкиДанных( СтруктураКолонок["ИмяКолонкиИД"])) = Неопределено Тогда
			Для Каждого ПолеКомпоновки Из ОписаниеПолей Цикл
				ИсключаемыеПоля.Добавить(ПолеКомпоновки);	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
	ИсключаемыеМакеты = Новый Массив;
	ИсключаемыеПоля = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИсключаемыеПоля); 
	Для Каждого ИсключаемоеПоле Из ИсключаемыеПоля Цикл
		Для Каждого Макет Из Схема.МакетыПолей Цикл
			Если Новый ПолеКомпоновкиДанных(Макет.Поле)= ИсключаемоеПоле Тогда
				ИсключаемыеМакеты.Добавить(Макет);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;                                   
	
	Для Каждого ИсключаемыйМакет Из ИсключаемыеМакеты Цикл
		Схема.МакетыПолей.Удалить(ИсключаемыйМакет);
	КонецЦикла;
	
КонецПроцедуры

// Структура колонок таблицы из заголовка ошибки.
// 
// Параметры:
//  МаппингПолей -  Соответствие - 
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - Структура колонок таблицы из заголовка ошибки:
// * ОбратноеСоответствиеИмен - ФиксированноеСоответствие -
// * ОписанияКолонок - ФиксированныйМассив -
// * ПрямоеСоотвествиеИмен - ФиксированноеСоответствие -
Функция СтруктураКолонокТаблицыИзЗаголовкаОшибки(МаппингПолей)
	
	СоотвествиеИмен = YellowCollectorОбщегоНазначения.СоответствиеИменДляЗапросаЗаголовкиВсехОтчетовОбОшибках();
	СтруктураКолонок = Новый Структура;
	ОписанияКолонок = Новый Массив;
	ОбратноеСоответствиеИмен = Новый Соответствие;
	ИмяКолонкиИД = "";
	
	Для Каждого МаппингПоля Из МаппингПолей Цикл
		
		ОписаниеКолонки = Новый Структура("ИмяКолонки, Заголовок, ТипСтрокой");
		СоответствиеЗаголовка = СоотвествиеИмен.Получить(МаппингПоля["name"]);
		Если СоответствиеЗаголовка = Неопределено Тогда
			
			ОписаниеКолонки.ИмяКолонки = МаппингПоля["name"];
			ОписаниеКолонки.Заголовок = МаппингПоля["name"];
			ОписаниеКолонки.ТипСтрокой = МаппингПоля["type"];
							
		Иначе
			
			ОписаниеКолонки.ИмяКолонки = СоответствиеЗаголовка.Имя;
			ОписаниеКолонки.Заголовок = СоответствиеЗаголовка.Заголовок;
			ОписаниеКолонки.ТипСтрокой = СоответствиеЗаголовка.Тип;

		КонецЕсли;
		
		Если МаппингПоля["id"] = Истина Тогда
			ИмяКолонкиИД = ОписаниеКолонки.ИмяКолонки;
		КонецЕсли;
		
		ОбратноеСоответствиеИмен.Вставить(ОписаниеКолонки.ИмяКолонки, МаппингПоля["name"]);
		
		ОписанияКолонок.Добавить(ОписаниеКолонки);
		
	КонецЦикла;
	
	//СтруктураКолонок.Вставить("ОписанияКолонок", ОбщегоНазначения.ПеревернутьМассив(ОписанияКолонок));
	СтруктураКолонок.Вставить("ОписанияКолонок", ОписанияКолонок);
	СтруктураКолонок.Вставить("ПрямоеСоотвествиеИмен", СоотвествиеИмен);
	СтруктураКолонок.Вставить("ОбратноеСоответствиеИмен", ОбратноеСоответствиеИмен);
	СтруктураКолонок.Вставить("ИмяКолонкиИД", ИмяКолонкиИД);
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(СтруктураКолонок);
	
КонецФункции

Процедура ПолучитьСхемуКомпоновкиДанныхИПоместитьВоВременноеХранилище(Параметры)
	
	Схема = СхемаКомпоновкиОбщая(СтруктураКолонок.ОписанияКолонок);
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема, Параметры["УИДДляВременногоХранилищаАдресаСхемы"]);
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, Параметры["УИДДляВременногоХранилищаАдресаСхемы"]);
	
КонецПроцедуры

#Область ФормированиеСхемыСКД

// Схема компоновки общая.
// 
// Параметры:
//  СтруктураКолонок - ФиксированнаяСтруктура - см. Обработки.МониторОшибок.СтруктураКолонокТаблицыИзЗаголовкаОшибки
// 
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - 
Функция СхемаКомпоновкиОбщая(ОписаниеКолонок)
	
	Схема = СоздатьСхемуКомпоновкиДанныхСНаборомДанныхОбъект("НаборДанных1", "ОбщаяТаблицаОшибок");
	ЗаполнитьПоляНабораДанных(Схема, ОписаниеКолонок);
	ЗаполнитьПоляВыбораНастроек(Схема.НастройкиПоУмолчанию, ОписаниеКолонок);
	ДобавитьДетальныеЗаписиСАвтополоемВНастройки(Схема.НастройкиПоУмолчанию); 
	ЗаполнитьМакеты(Схема, ОписаниеКолонок);
	ЗаполнитьМакетыПолей(Схема, ОписаниеКолонок);
	ЗаполнитьПредопределенныеПараметры(Схема);
	
	Возврат Схема;
	
КонецФункции

// Заполнить предопределнные отборы.
// 
// Параметры:
//  Схема - СхемаКомпоновкиДанных - Схема
Процедура ЗаполнитьПредопределенныеПараметры(Схема)  
	
	// Параметр "Включать помеченные на удаление"
	ПараметрВключатьПомеченныеНаУдаление = Схема.Параметры.Добавить();
	ПараметрВключатьПомеченныеНаУдаление.Имя = "ВключатьПомеченныеНаУдаление";
	ПараметрВключатьПомеченныеНаУдаление.ТипЗначения = Новый ОписаниеТипов("Булево");
	ПараметрВключатьПомеченныеНаУдаление.Заголовок = "Включать помеченные на удаления";
	ПараметрВключатьПомеченныеНаУдаление.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрВключатьПомеченныеНаУдаление.ВключатьВДоступныеПоля = Истина;
	ПараметрВключатьПомеченныеНаУдаление.Значение = Истина;
		  
	ЗначениеПараметрВключатьПомеченныеНаУдаление = Схема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Добавить();  
	ЗначениеПараметрВключатьПомеченныеНаУдаление.Параметр = Новый ПараметрКомпоновкиДанных("ВключатьПомеченныеНаУдаление");
	ЗначениеПараметрВключатьПомеченныеНаУдаление.Использование = Истина;
    ЗначениеПараметрВключатьПомеченныеНаУдаление.Значение = Истина;
  
	ЗначениеПараметрВключатьПомеченныеНаУдаление.ИдентификаторПользовательскойНастройки = "ВключатьПомеченныеНаУдаление";  
	
	// Параметр "Период"
	ПараметрПериод = Схема.Параметры.Добавить();
	ПараметрПериод.Имя = "Период";
	ПараметрПериод.ТипЗначения = Новый ОписаниеТипов("СтандартныйПериод");
	ПараметрПериод.Заголовок = "Период";
	ПараметрПериод.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрПериод.ВключатьВДоступныеПоля = Истина;
	
	ПериодЗначение = Новый СтандартныйПериод;
	ПериодЗначение.ДатаНачала = ОбщегоНазначенияКлиентСервер.СдвинутьДатуНаПериод(ТекущаяДатаСеанса(), "ДЕНЬ", -3);
	ПериодЗначение.ДатаОкончания = ТекущаяДатаСеанса();
	
	ЗначениеПараметрПериод = Схема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Добавить();  
	ЗначениеПараметрПериод.Параметр = Новый ПараметрКомпоновкиДанных("Период");
	ЗначениеПараметрПериод.Использование = Истина;
    ЗначениеПараметрПериод.Значение = ПериодЗначение;
  
	ЗначениеПараметрПериод.ИдентификаторПользовательскойНастройки = "Период";  
	  
КонецПроцедуры

Процедура ЗаполнитьМакеты(Схема, ОписаниеКолонок)
	
	Для Каждого ОписаниеКолонки Из ОписаниеКолонок Цикл
		
		ОписаниеМакета = ДобавитьОписаниеМакета(Схема, ОписаниеКолонки.ИмяКолонки);
		ДобавитьПараметрыВОписаниеМакета(ОписаниеМакета, ОписаниеКолонки.ИмяКолонки);
		ДобавитьМакетВОписаниеМакета(ОписаниеМакета, ОписаниеКолонки.ИмяКолонки)
		
	КонецЦикла;
	
КонецПроцедуры

// Добавить макет в описание макета.
// 
// Параметры:
//  ОписаниеМакета - ОписаниеМакетаСхемыКомпоновкиДанных - Описание макета
//  ИмяПоля - Строка -
Процедура ДобавитьМакетВОписаниеМакета(ОписаниеМакета, ИмяПоля)
	
	Макет = Новый МакетОбластиКомпоновкиДанных; 
	
	СтрокаТаблицыОбласти = Макет.Добавить(Тип("СтрокаТаблицыОбластиКомпоновкиДанных")); 
	Ячейка = СтрокаТаблицыОбласти.Ячейки.Добавить();
	
	ПолеОбластиКомпоновкиДанных = Ячейка.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
	ПолеОбластиКомпоновкиДанных.Значение = Новый ПараметрКомпоновкиДанных(ИмяПоля);  
	
	Ячейка.Оформление.УстановитьЗначениеПараметра("Расшифровка", Новый ПараметрКомпоновкиДанных("Расшифровка")); 
	
	ОписаниеМакета.Макет = Макет; 
	
КонецПроцедуры

// Добавить параметры в описание макета.
// 
// Параметры:
//  ОписаниеМакета - ОписаниеМакетаСхемыКомпоновкиДанных - 
//  ИмяКолонки - Строка -
Процедура ДобавитьПараметрыВОписаниеМакета(ОписаниеМакета, ИмяКолонки)
	
	// Параметр выражения представляет собой описание выражения, которое будет выводиться в макете
	ПараметрВыражение = ОписаниеМакета.Параметры.Добавить(Тип("ПараметрОбластиВыражениеКомпоновкиДанных"));
	ПараметрВыражение.Выражение = ИмяКолонки;
	ПараметрВыражение.Имя = ИмяКолонки; 

	ПараметрРасшифровка = ОписаниеМакета.Параметры.Добавить(Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных"));  
	ПараметрРасшифровка.Имя = "Расшифровка";
	
	// В каждом поле необходимо хранить ИД отчета об ошибке, чтобы понимать к какому отчету относится та или иная ошибка
	ВыражениеИД= ПараметрРасшифровка.ВыраженияПолей.Добавить();
	ВыражениеИД.Выражение = СтруктураКолонок["ИмяКолонкиИД"];
	ВыражениеИД.Поле = СтруктураКолонок["ИмяКолонкиИД"];
	
	ВыражениеПоле = ПараметрРасшифровка.ВыраженияПолей.Добавить();
	ВыражениеПоле.Выражение = ИмяКолонки;
	ВыражениеПоле.Поле = ИмяКолонки;
	
КонецПроцедуры

// Добавить описание макета.
// 
// Параметры:
//  Схема - СхемаКомпоновкиДанных - 
//  ИмяПоля - Строка - 
// 
// Возвращаемое значение:
//  ОписаниеМакетаСхемыКомпоновкиДанных - 
Функция ДобавитьОписаниеМакета(Схема, ИмяПоля)
	
	ОписаниеМакета =  Схема.Макеты.Добавить();  
	ОписаниеМакета.Имя = ИмяМакетаПоля(ИмяПоля); 
	
	Возврат ОписаниеМакета;
	
КонецФункции

// Заполнить макеты полей.
// 
// Параметры:
//  Схема - СхемаКомпоновкиДанных - Схема
//  ОписаниеКолонок - ФиксированнаяСтруктура - см. Обработки.МониторОшибок.СтруктураКолонокТаблицыИзЗаголовкаОшибки
//
Процедура ЗаполнитьМакетыПолей(Схема, ОписаниеКолонок)
	
	Для Каждого ОписаниеКолонки Из ОписаниеКолонок Цикл
		СвязатьМакетПоляСМакетом(Схема, ОписаниеКолонки.ИмяКолонки);
	КонецЦикла;
	
КонецПроцедуры

// Добавить макет поля.
// 
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - 
//  ИмяПоля - Строка - 
Процедура СвязатьМакетПоляСМакетом(СхемаКомпоновкиДанных, ИмяПоля)

	МакетПоля = СхемаКомпоновкиДанных.МакетыПолей.Добавить();
	МакетПоля.Макет = ИмяМакетаПоля(ИмяПоля);
	МакетПоля.Поле = ИмяПоля;
	
КонецПроцедуры

// Имя макета поля.
// 
// Параметры:
//  ИмяПоля - Строка - 
// 
// Возвращаемое значение:
//  Строка - Имя макета поля
Функция ИмяМакетаПоля(ИмяПоля)
	Возврат СтрШаблон("%1%2", "Макет", ИмяПоля);
КонецФункции

Процедура ЗаполнитьПоляНабораДанных(Схема, ОписанияКолонок)
	
	Для Каждого ОписаниеКолонки Из ОписанияКолонок Цикл

		ДобавитьПолеВНаборДанных(Схема.НаборыДанных[0], 
		                         ОписаниеКолонки.ИмяКолонки, 
		                         ОписаниеКолонки.ИмяКолонки,
			                     ОписаниеКолонки.Заголовок,
							     ОписаниеКолонки.ТипСтрокой);
			
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПоляВыбораНастроек(Настройки, ОписанияКолонок)
	
	Для Каждого ОписаниеКолонки Из ОписанияКолонок Цикл

		ВыбранноеПоле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеКолонки.ИмяКолонки);

	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДетальныеЗаписиСАвтополоемВНастройки(Настройки)
	
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Использование = Истина;
	   
	Автополе = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Автополе.Использование = Истина;
	
КонецПроцедуры

#Область РаботаССКД

Функция СоздатьСхемуКомпоновкиДанныхСНаборомДанныхОбъект(ИмяНабора, ИмяОбъекта)

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;

	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";

	НаборДанныхОбъект = СхемаКомпоновкиДанных
	                                         .НаборыДанных
	                                         .Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	
	НаборДанныхОбъект.Имя = ИмяНабора;
	НаборДанныхОбъект.ИмяОбъекта = ИмяОбъекта;
	НаборДанныхОбъект.ИсточникДанных = "ИсточникДанных1";
	
	Возврат СхемаКомпоновкиДанных;

КонецФункции

Функция ДобавитьПолеВНаборДанных(Набор, ИмяПоля, Путь, Заголовок, ТипСтрокой)

	ПолеНабора = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабора.Поле = ИмяПоля;
	ПолеНабора.ПутьКДанным = Путь;
	ПолеНабора.Заголовок = Заголовок;
	ПолеНабора.ТипЗначения = Новый ОписаниеТипов(ТипСтрокой);
	
	Возврат ПолеНабора;

КонецФункции

#КонецОбласти    

#КонецОбласти

#Область Вспомогательные

Функция ЗаголовкиВсехОтчетовОбОшибкахВТаблице(ЗаголовкиОшибок)
	
	ОбщаяТаблицаОшибок = Новый ТаблицаЗначений;
	Для Каждого ОписаниеКолонки Из СтруктураКолонок.ОписанияКолонок Цикл
		ОбщаяТаблицаОшибок.Колонки.Добавить(ОписаниеКолонки.ИмяКолонки);	
	КонецЦикла;
	
	Для Каждого ЗаголовокОшибки Из ЗаголовкиОшибок Цикл
		
		СтрокаОписаниеОшибки = ОбщаяТаблицаОшибок.Добавить();   
		Для Каждого ОписаниеКолонки Из СтруктураКолонок.ОписанияКолонок Цикл
			
			ЗначениеПоляЗаголовкаВСтроке = ЗаголовокОшибки.Получить(СтруктураКолонок.ОбратноеСоответствиеИмен.Получить(ОписаниеКолонки.ИмяКолонки));
			Если НРег(ОписаниеКолонки.ТипСтрокой) = "дата" Тогда
				ЗначениеПоляЗаголовка = ПрочитатьДатуJSON(ЗначениеПоляЗаголовкаВСтроке, ФорматДатыJSON.ISO); 
			Иначе
				ЗначениеПоляЗаголовка = ЗначениеПоляЗаголовкаВСтроке; 	
			КонецЕсли;                                                
			
			СтрокаОписаниеОшибки[ОписаниеКолонки.ИмяКолонки] = ЗначениеПоляЗаголовка;
						  
		КонецЦикла;	  
		
	КонецЦикла;
	
	Возврат ОбщаяТаблицаОшибок;
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВзаимодействиеСYellowCollector

Функция ПолучитьМаппингПолейЗапросаПолученияСпискаОшибок()
	
	МаппингПолей = МенеджерМонитора.ПолучитьМаппингПолейЗапросаПолученияСпискаОшибок();
	Если МаппингПолей.Получить("fields") = Неопределено 
	     ИЛИ МаппингПолей["fields"].Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Не удалось связаться с сервером ""Yellow Collector""'");	
	КонецЕсли;  
	Возврат МаппингПолей["fields"];
	
КонецФункции

Функция ПолучитьЗаголовкиВсехОтчетовОбОшибках() 
	
	ЗаголовкиВсехОтчетов = МенеджерМонитора.ПолучитьЗаголовкиВсехОтчетовОбОшибках();
	Если ЗаголовкиВсехОтчетов.Получить("headers") = Неопределено 
	     ИЛИ ЗаголовкиВсехОтчетов["headers"].Количество() <= 0 Тогда
		ВызватьИсключение НСтр("ru='Не удалось связаться с сервером ""Yellow Collector""'");	
	КонецЕсли;  
	Возврат ЗаголовкиВсехОтчетов["headers"];

КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация 

МенеджерМонитора = Обработки.МониторОшибок;

#КонецОбласти	
	
#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте'");
#КонецЕсли